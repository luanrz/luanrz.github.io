<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Java on luanrz's blog</title><link>https://luanrz.github.io/categories/java/</link><description>Recent content in Java on luanrz's blog</description><generator>Hugo -- 0.152.0</generator><language>zh-cn</language><lastBuildDate>Tue, 15 Apr 2025 15:37:48 +0800</lastBuildDate><atom:link href="https://luanrz.github.io/categories/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Java打包内置JRE</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java%E6%89%93%E5%8C%85%E5%86%85%E7%BD%AEjre/</link><pubDate>Tue, 15 Apr 2025 15:37:48 +0800</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java%E6%89%93%E5%8C%85%E5%86%85%E7%BD%AEjre/</guid><description>&lt;p&gt;基于JDK17及以上版本，制作内置JRE的可执行应用。&lt;/p&gt;
&lt;h2 id="一使用jdeps与jmod寻找模块依赖"&gt;一、使用&lt;code&gt;jdeps&lt;/code&gt;与&lt;code&gt;jmod&lt;/code&gt;寻找模块依赖&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;jdeps &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt;--print-module-deps &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt;--ignore-missing-deps &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt;-recursive &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt;target/app.jar
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;jdeps&lt;/code&gt;无法统计部分依赖，如：非模块化的依赖、动态加载或反射的依赖等等。可以使用下述&lt;code&gt;jmod&lt;/code&gt;脚本手工找到对应的依赖：&lt;/p&gt;</description></item><item><title>Maven私有包备份</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/maven%E7%A7%81%E6%9C%89%E5%8C%85%E5%A4%87%E4%BB%BD/</link><pubDate>Thu, 27 Mar 2025 17:47:08 +0800</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/maven%E7%A7%81%E6%9C%89%E5%8C%85%E5%A4%87%E4%BB%BD/</guid><description>&lt;h3 id="一修改maven配置文件"&gt;一、修改Maven配置文件&lt;/h3&gt;
&lt;p&gt;为支持混合加载远程与本地包，需在maven配置文件中分别指定远程和本地地址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;远程：&lt;code&gt;https://maven.aliyun.com/repository/central&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;本地：&lt;code&gt;file://${HOME}/.m2/repository_backup&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;vim ~/.m2/settings.xml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;settings&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;profiles&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;profile&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;m2-mix-remote-local&lt;span style="color:#f92672"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;repositories&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;m2-remote&lt;span style="color:#f92672"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://maven.aliyun.com/repository/central&lt;span style="color:#f92672"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;m2-local&lt;span style="color:#f92672"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;file://${HOME}/.m2/repository_backup&lt;span style="color:#f92672"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/repositories&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;pluginRepositories&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;pluginRepository&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;m2-remote&lt;span style="color:#f92672"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://maven.aliyun.com/repository/central&lt;span style="color:#f92672"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/pluginRepository&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;pluginRepository&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;m2-local&lt;span style="color:#f92672"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;file://${HOME}/.m2/repository_backup&lt;span style="color:#f92672"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/pluginRepository&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/pluginRepositories&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/profiles&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;activeProfiles&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;activeProfile&amp;gt;&lt;/span&gt;m2-mix-remote-local&lt;span style="color:#f92672"&gt;&amp;lt;/activeProfile&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/activeProfiles&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="二收集本地依赖包"&gt;二、收集本地依赖包&lt;/h3&gt;
&lt;p&gt;（1）重命名原来的maven本地仓库，后续将从该目录下提取无法从公网下载的依赖包。&lt;/p&gt;</description></item><item><title>构建Java云原生镜像：基于Quarkus的镜像</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E6%9E%84%E5%BB%BAjava%E4%BA%91%E5%8E%9F%E7%94%9F%E9%95%9C%E5%83%8F%E5%9F%BA%E4%BA%8Equarkus%E7%9A%84%E9%95%9C%E5%83%8F/</link><pubDate>Tue, 05 Dec 2023 20:48:07 +0800</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E6%9E%84%E5%BB%BAjava%E4%BA%91%E5%8E%9F%E7%94%9F%E9%95%9C%E5%83%8F%E5%9F%BA%E4%BA%8Equarkus%E7%9A%84%E9%95%9C%E5%83%8F/</guid><description>&lt;h2 id="一准备一个quarkus项目"&gt;一、准备一个Quarkus项目&lt;/h2&gt;
&lt;p&gt;可使用&lt;a href="https://quarkus.io/guides/cli-tooling"&gt;Quarkus CLI&lt;/a&gt;快速生成一个Quarkus项目，如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;quarkus create
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该命令将生成一个名为&lt;code&gt;code-with-quarkus&lt;/code&gt;的项目，如果不想使用&lt;code&gt;quarkus-cli&lt;/code&gt;，也可基于&lt;a href="https://code.quarkus.io"&gt;Quarkus脚手架&lt;/a&gt;或&lt;a href="https://quarkus.io/guides/ide-tooling"&gt;IDE插件&lt;/a&gt;创建项目。&lt;/p&gt;</description></item><item><title>构建Java云原生镜像：基于SpringBoot的GraalVM镜像</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E6%9E%84%E5%BB%BAjava%E4%BA%91%E5%8E%9F%E7%94%9F%E9%95%9C%E5%83%8F%E5%9F%BA%E4%BA%8Espringboot%E7%9A%84graalvm%E9%95%9C%E5%83%8F/</link><pubDate>Tue, 05 Dec 2023 20:47:23 +0800</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E6%9E%84%E5%BB%BAjava%E4%BA%91%E5%8E%9F%E7%94%9F%E9%95%9C%E5%83%8F%E5%9F%BA%E4%BA%8Espringboot%E7%9A%84graalvm%E9%95%9C%E5%83%8F/</guid><description>&lt;h2 id="一引入graalvm组件"&gt;一、引入graalvm组件&lt;/h2&gt;
&lt;p&gt;在任意&lt;a href="https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E6%9E%84%E5%BB%BAjava%E4%BA%91%E5%8E%9F%E7%94%9F%E9%95%9C%E5%83%8F%E5%9F%BA%E4%BA%8Espringboot%E7%9A%84%E5%88%86%E5%B1%82%E9%95%9C%E5%83%8F/#一准备一个springboot项目"&gt;SpringBoot项目&lt;/a&gt;的基础上，引入以下graalvm的maven插件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.graalvm.buildtools&lt;span style="color:#f92672"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;native-maven-plugin&lt;span style="color:#f92672"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="二使用springboot插件构建镜像"&gt;二、使用SpringBoot插件构建镜像&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;spring-boot-maven-plugin&lt;/code&gt;插件下的&lt;code&gt;build-image&lt;/code&gt;执行目标提供了一键生成镜像的功能，如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mvn -Pnative spring-boot:build-image
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行该命令需要先启动Docker，执行完成后，会自动生成Docker镜像。&lt;/p&gt;</description></item><item><title>构建Java云原生镜像：基于SpringBoot的分层镜像</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E6%9E%84%E5%BB%BAjava%E4%BA%91%E5%8E%9F%E7%94%9F%E9%95%9C%E5%83%8F%E5%9F%BA%E4%BA%8Espringboot%E7%9A%84%E5%88%86%E5%B1%82%E9%95%9C%E5%83%8F/</link><pubDate>Tue, 05 Dec 2023 17:30:23 +0800</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E6%9E%84%E5%BB%BAjava%E4%BA%91%E5%8E%9F%E7%94%9F%E9%95%9C%E5%83%8F%E5%9F%BA%E4%BA%8Espringboot%E7%9A%84%E5%88%86%E5%B1%82%E9%95%9C%E5%83%8F/</guid><description>&lt;p&gt;Java应用上云接入K8S的第一步便是构建镜像，其最简单的方法就是直接将整个jar包打入Docker镜像。除此之外，SpringBoot还提供了一种分层镜像的方式，能够将基本不变的外部依赖包与经常发生变动的应用文件隔离成了不同的Docker层，在二次构建过程中，不变的外部依赖包的Docker层会默认使用缓存，以带来更快的构建速度。&lt;/p&gt;</description></item><item><title>基于PlantUML的Java文本绘图</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E5%9F%BA%E4%BA%8Eplantuml%E7%9A%84java%E6%96%87%E6%9C%AC%E7%BB%98%E5%9B%BE/</link><pubDate>Tue, 21 Nov 2023 13:12:25 +0800</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E5%9F%BA%E4%BA%8Eplantuml%E7%9A%84java%E6%96%87%E6%9C%AC%E7%BB%98%E5%9B%BE/</guid><description>&lt;h2 id="一前言"&gt;一、前言&lt;/h2&gt;
&lt;p&gt;PlantUML是软件开发过程中的一种常用文本绘图工具，其使用纯文本定义图形结构，并依此绘制对应的图形。在绘制PlantUML的过程中，无需拖拽图形组件、手动维护组件之间的连接关系。&lt;/p&gt;</description></item><item><title>Maven插件开发入门</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/maven%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/</link><pubDate>Tue, 21 Nov 2023 10:22:10 +0800</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/maven%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/</guid><description>&lt;h2 id="一开发自定义插件"&gt;一、开发自定义插件&lt;/h2&gt;
&lt;p&gt;新建Maven工程，修改&lt;code&gt;pom.xml&lt;/code&gt;如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;project&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;xmlns=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;xmlns:xsi=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span style="color:#f92672"&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.example&lt;span style="color:#f92672"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;hello-maven-plugin&lt;span style="color:#f92672"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span style="color:#f92672"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;maven-plugin&lt;span style="color:#f92672"&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;project.build.sourceEncoding&amp;gt;&lt;/span&gt;UTF-8&lt;span style="color:#f92672"&gt;&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;maven.compiler.encoding&amp;gt;&lt;/span&gt;UTF-8&lt;span style="color:#f92672"&gt;&amp;lt;/maven.compiler.encoding&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;maven.compiler.source&amp;gt;&lt;/span&gt;8&lt;span style="color:#f92672"&gt;&amp;lt;/maven.compiler.source&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;maven.compiler.target&amp;gt;&lt;/span&gt;8&lt;span style="color:#f92672"&gt;&amp;lt;/maven.compiler.target&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;maven-plugin-tools.version&amp;gt;&lt;/span&gt;3.6.4&lt;span style="color:#f92672"&gt;&amp;lt;/maven-plugin-tools.version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven&lt;span style="color:#f92672"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-plugin-api&lt;span style="color:#f92672"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.6.3&lt;span style="color:#f92672"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;provided&lt;span style="color:#f92672"&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugin-tools&lt;span style="color:#f92672"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-plugin-annotations&lt;span style="color:#f92672"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${maven-plugin-tools.version}&lt;span style="color:#f92672"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;provided&lt;span style="color:#f92672"&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;pluginManagement&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span style="color:#f92672"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-plugin-plugin&lt;span style="color:#f92672"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${maven-plugin-tools.version}&lt;span style="color:#f92672"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;help-mojo&lt;span style="color:#f92672"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;helpmojo&lt;span style="color:#f92672"&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/pluginManagement&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述配置中：&lt;/p&gt;</description></item><item><title>Maven构建流程浅析</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/maven%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B%E6%B5%85%E6%9E%90/</link><pubDate>Wed, 16 Aug 2023 20:27:36 +0800</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/maven%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B%E6%B5%85%E6%9E%90/</guid><description>&lt;h2 id="一前言"&gt;一、前言&lt;/h2&gt;
&lt;p&gt;Maven可以使用&lt;code&gt;clean&lt;/code&gt;、&lt;code&gt;compile&lt;/code&gt;、&lt;code&gt;package&lt;/code&gt;、&lt;code&gt;install&lt;/code&gt;等指令完成Java项目构建，一个典型的Maven指令为：&lt;code&gt;mvn package&lt;/code&gt;，该命令的控制台输出如下所示：&lt;/p&gt;</description></item><item><title>Netty多路复用机制浅析</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/netty%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E6%9C%BA%E5%88%B6%E6%B5%85%E6%9E%90/</link><pubDate>Tue, 30 May 2023 14:21:28 +0800</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/netty%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E6%9C%BA%E5%88%B6%E6%B5%85%E6%9E%90/</guid><description>&lt;h2 id="一操作系统中的多路复用io模型"&gt;一、操作系统中的多路复用IO模型&lt;/h2&gt;
&lt;p&gt;Java本身并不实现底层IO，而是通过native方法封装操作系统IO指令。&lt;/p&gt;
&lt;p&gt;Linux(Unix)作为Java应用部署的主流操作系统，有五种IO模型：&lt;/p&gt;</description></item><item><title>从外部获取Java局部变量：基于反射与切面的一种实现</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E4%BB%8E%E5%A4%96%E9%83%A8%E8%8E%B7%E5%8F%96java%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%9F%BA%E4%BA%8E%E5%8F%8D%E5%B0%84%E4%B8%8E%E5%88%87%E9%9D%A2%E7%9A%84%E4%B8%80%E7%A7%8D%E5%AE%9E%E7%8E%B0/</link><pubDate>Wed, 17 May 2023 18:15:51 +0800</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E4%BB%8E%E5%A4%96%E9%83%A8%E8%8E%B7%E5%8F%96java%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%9F%BA%E4%BA%8E%E5%8F%8D%E5%B0%84%E4%B8%8E%E5%88%87%E9%9D%A2%E7%9A%84%E4%B8%80%E7%A7%8D%E5%AE%9E%E7%8E%B0/</guid><description>&lt;p&gt;从外部获取局部变量的一种使用场景是：出于分析目的，批量统计项目中的某一类数据（如SQL语句），同时，这类数据又大多位于方法内部。&lt;/p&gt;
&lt;p&gt;正常情况下，Java无法从一个类中获取到另外一个类的局部变量，本文将介绍一种基于反射与切面的解决方案。&lt;/p&gt;</description></item><item><title>Redis分布式ID实现</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/redis%E5%88%86%E5%B8%83%E5%BC%8Fid%E5%AE%9E%E7%8E%B0/</link><pubDate>Tue, 16 May 2023 21:00:00 +0800</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/redis%E5%88%86%E5%B8%83%E5%BC%8Fid%E5%AE%9E%E7%8E%B0/</guid><description>&lt;p&gt;分布式ID的实现方式有多种：UUID、雪花算法、数据库自增ID、数据库序列（Oracle）、Redis等等。下面将以Redis为例实现一个简单的分布式ID。&lt;/p&gt;</description></item><item><title>Redis分布式锁简介</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%AE%80%E4%BB%8B/</link><pubDate>Fri, 10 Mar 2023 11:01:21 +0800</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%AE%80%E4%BB%8B/</guid><description>&lt;p&gt;锁是实现安全访问共享资源的一种同步机制。在单机环境下，Java原生锁可以很好地支持多线程竞争资源时的安全性，分布式环境就行不通了，因为不同的JVM无法共享锁资源。&lt;/p&gt;</description></item><item><title>Redis缓存：分布式缓存配置与多级缓存简介</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/redis%E7%BC%93%E5%AD%98%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98%E7%AE%80%E4%BB%8B/</link><pubDate>Sun, 19 Feb 2023 22:06:40 +0800</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/redis%E7%BC%93%E5%AD%98%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98%E7%AE%80%E4%BB%8B/</guid><description>&lt;p&gt;分布式缓存与多级缓存可以实现服务的高性能和高可用。下面将介绍一下分布式缓存中主从集群与哨兵集群的配置，与多级缓存的基本场景。&lt;/p&gt;
&lt;h2 id="一分布式缓存配置"&gt;一、分布式缓存配置&lt;/h2&gt;
&lt;h3 id="一主从集群"&gt;（一）主从集群&lt;/h3&gt;
&lt;p&gt;主从集群一般由一个负责写的主节点和多个负责读的从节点组成。下面将演示在本机搭建一个三节点的主从集群，它们的端口号分别为：7001、7002、7003，其中，7001为主节点。&lt;/p&gt;</description></item><item><title>Redis缓存：缓存延迟与缓存失效</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/redis%E7%BC%93%E5%AD%98%E7%BC%93%E5%AD%98%E5%BB%B6%E8%BF%9F%E4%B8%8E%E7%BC%93%E5%AD%98%E5%A4%B1%E6%95%88/</link><pubDate>Sat, 11 Feb 2023 18:48:13 +0800</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/redis%E7%BC%93%E5%AD%98%E7%BC%93%E5%AD%98%E5%BB%B6%E8%BF%9F%E4%B8%8E%E7%BC%93%E5%AD%98%E5%A4%B1%E6%95%88/</guid><description>&lt;p&gt;Redis缓存延迟指的是：Redis与数据库发生同步过程中Redis数据状态滞后的现象。缓存延迟涉及到数据一致性与缓存更新策略的选择。&lt;/p&gt;
&lt;p&gt;Redis缓存失效指的是：因为缓存穿透、缓存击穿、缓存雪崩等原因导致Redis缓存查询不到的情况。&lt;/p&gt;</description></item><item><title>Redis缓存：常用数据结构与基本用法</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/redis%E7%BC%93%E5%AD%98%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link><pubDate>Wed, 08 Feb 2023 09:03:02 +0800</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/redis%E7%BC%93%E5%AD%98%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid><description>&lt;p&gt;&lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt;是一种基于内存的高性能NoSQL数据库，它最常见的一种应用场景就是缓存。本文将首先演示Redis的安装过程，随后介绍一些Redis常用的数据结构及其对应的命令，最后将会基于Spring实现Redis的读写。&lt;/p&gt;
&lt;h2 id="一安装redis"&gt;一、安装Redis&lt;/h2&gt;
&lt;p&gt;下面将简单介绍Linux、Mac与Docker安装Redis的过程，更详细的安装说明可以参见&lt;a href="https://redis.io/docs/getting-started/installation/"&gt;Redis安装官方页面&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id="一安装redis-1"&gt;（一）安装Redis&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Linux&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo pacman -S redis &lt;span style="color:#75715e"&gt;# ArchLinux&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt install redis &lt;span style="color:#75715e"&gt;# Debian / Ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Mac&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brew install redis
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Docker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker run --name redis1 -dp 6379:6379 redis:latest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Windows系统可以通过&lt;code&gt;wsl&lt;/code&gt;安装Linux版本的redis。Docker运行Redis可以参见&lt;a href="https://hub.docker.com/_/redis/"&gt;Redos的DockerHub官方页面&lt;/a&gt;。&lt;/p&gt;</description></item><item><title>HashMap原理浅析</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/hashmap%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/</link><pubDate>Tue, 23 Aug 2022 21:50:20 +0000</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/hashmap%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/</guid><description>&lt;p&gt;HashMap是Java中一种常见的集合实现，在不同的jdk版本中，HashMap的实现也不同。本文将以jdk8为主，从源码层面简单分析一下HashMap的存储结构与读写过程，最后简单介绍一下高并发下HashMap的使用方法。&lt;/p&gt;</description></item><item><title>Java线程池简介</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%AE%80%E4%BB%8B/</link><pubDate>Sat, 20 Aug 2022 16:54:26 +0000</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%AE%80%E4%BB%8B/</guid><description>&lt;p&gt;一般来说，Java中每一个任务都与其对应的线程共享生命周期，任务执行完毕后其线程也会跟着销毁，随着任务数量的增加，重复创建线程所带来的消耗所产生的性能影响也会更显著。线程池提供了一种复用多个线程的方案，以此避免无谓的线程创建，它通过管理线程们的生命周期和调度方式，为任务的批量执行提供更强的灵活性。&lt;/p&gt;
&lt;p&gt;线程池主要是指&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;类，本文将围绕&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;类及其相关类，展开对线程池的介绍。&lt;/p&gt;</description></item><item><title>Java阻塞队列简介</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E7%AE%80%E4%BB%8B/</link><pubDate>Mon, 01 Aug 2022 17:00:00 +0000</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E7%AE%80%E4%BB%8B/</guid><description>&lt;p&gt;Java阻塞队列是一种可以实现&lt;strong&gt;阻塞插入&lt;/strong&gt;和&lt;strong&gt;阻塞移除&lt;/strong&gt;的特殊队列，它被广泛应用于生产者消费者模式。如在线程池中，可以使用&lt;code&gt;LinkedBlockingQueue&lt;/code&gt;与&lt;code&gt;SynchronousQueue&lt;/code&gt;等阻塞队列来生产与消费线程对象。&lt;/p&gt;
&lt;p&gt;下面将简单介绍Java中常用的几个阻塞队列。&lt;/p&gt;</description></item><item><title>Java锁简介</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java%E9%94%81%E7%AE%80%E4%BB%8B/</link><pubDate>Wed, 06 Jul 2022 11:15:36 +0000</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java%E9%94%81%E7%AE%80%E4%BB%8B/</guid><description>&lt;p&gt;Java锁(Lock)是实现Java线程安全的一种手段，它通过加锁和解锁的过程来实现线程间的同步，以保证多线程在竞争同一个公共资源时数据读写的正确性。&lt;/p&gt;
&lt;p&gt;本文将首先阐明&lt;a href="#%E4%B8%80%E5%89%8D%E8%A8%80"&gt;Lock在Java线程安全中的位置&lt;/a&gt;，随后将简单介绍&lt;a href="#%E4%BA%8Clock%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB"&gt;&lt;code&gt;Lock&lt;/code&gt;类之间的关系&lt;/a&gt;，最后将简单介绍Java锁的&lt;a href="#%E4%B8%89java%E9%94%81%E7%9A%84%E6%8A%BD%E8%B1%A1%E5%AE%9A%E4%B9%89"&gt;抽象定义&lt;/a&gt;与&lt;a href="#%E5%9B%9Bjava%E9%94%81%E7%9A%84%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0"&gt;具体实现&lt;/a&gt;。&lt;/p&gt;</description></item><item><title>Java内存模型简介</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%AE%80%E4%BB%8B/</link><pubDate>Fri, 24 Jun 2022 08:50:02 +0000</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%AE%80%E4%BB%8B/</guid><description>&lt;p&gt;Java内存模型（Java Memory Model，JMM）是Java多线程读写共享内存中的一种规范，该规范支持了&lt;code&gt;synchronized&lt;/code&gt;、&lt;code&gt;volatile&lt;/code&gt;、&lt;code&gt;final&lt;/code&gt;、&lt;code&gt;Lock&lt;/code&gt;等Java并发工具。&lt;/p&gt;
&lt;p&gt;前面介绍了JVM内存区域，JVM内存区域和Java内存模型是不同层次对内存的划分，Java内存模型侧重描述内存数据在多线程下的读写规则，一般关注&lt;strong&gt;并发&lt;/strong&gt;编程下线程如何正确读写共享数据。&lt;/p&gt;</description></item><item><title>JVM内存区域简介</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/jvm%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E7%AE%80%E4%BB%8B/</link><pubDate>Thu, 23 Jun 2022 11:24:43 +0000</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/jvm%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E7%AE%80%E4%BB%8B/</guid><description>&lt;p&gt;JVM内存区域（JVM内存结构，JVM内存布局）是Java虚拟机运行时数据的位置划分，其主要包括：程序计数器、虚拟机栈、本地方法栈、堆、方法区。&lt;/p&gt;
&lt;p&gt;后面将介绍Java内存模型，JVM内存区域和Java内存模型是不同层次对内存的划分，JVM内存区域侧重描述内存数据的结构布局，一般关注&lt;strong&gt;垃圾回收&lt;/strong&gt;（GC）及&lt;strong&gt;OOM&lt;/strong&gt;问题。&lt;/p&gt;</description></item><item><title>Java技能树</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java%E6%8A%80%E8%83%BD%E6%A0%91/</link><pubDate>Mon, 20 Jun 2022 15:34:51 +0000</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java%E6%8A%80%E8%83%BD%E6%A0%91/</guid><description>&lt;p&gt;梳理Java开发所需的技能点，用于指导后续的学习路线，并提供系统性的查漏补缺方式。&lt;/p&gt;</description></item><item><title>JVM双亲委派模型浅析</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/jvm%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B%E6%B5%85%E6%9E%90/</link><pubDate>Thu, 16 Jun 2022 08:51:45 +0000</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/jvm%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B%E6%B5%85%E6%9E%90/</guid><description>&lt;p&gt;&lt;strong&gt;双亲委派&lt;/strong&gt;(Parents Delegation)，一言以蔽之，就是：在Java虚拟机中，将类的加载行为&lt;strong&gt;委派&lt;/strong&gt;给父级(&lt;strong&gt;双亲&lt;/strong&gt;)类加载器的过程。&lt;/p&gt;
&lt;p&gt;接下来将逐一介绍Java8及Java9中的类加载器，并根据类加载器的组织结构，描述双亲委派的实现过程。&lt;/p&gt;</description></item><item><title>Maven依赖机制浅析</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/maven%E4%BE%9D%E8%B5%96%E6%9C%BA%E5%88%B6%E6%B5%85%E6%9E%90/</link><pubDate>Fri, 22 Apr 2022 13:49:08 +0000</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/maven%E4%BE%9D%E8%B5%96%E6%9C%BA%E5%88%B6%E6%B5%85%E6%9E%90/</guid><description>&lt;p&gt;Maven通过pom文件来管理Java包的依赖关系，多个pom文件组合在一起可以理解为一颗抽象的依赖树，父节点或祖父节点的包会传递给子节点或祖孙节点，这被称作&lt;strong&gt;传递依赖&lt;/strong&gt;(Transitive-Dependencies)。&lt;/p&gt;
&lt;p&gt;传递依赖一般通过两个标签来实现：parent与dependency，其中，parent定义了上级依赖，dependency定义了下级依赖。&lt;/p&gt;
&lt;p&gt;随着项目复杂性的提升，依赖树中包发生冲突的概率也会增加，Maven通过&lt;strong&gt;依赖仲裁&lt;/strong&gt;(Dependency-Mediation)与&lt;strong&gt;依赖管理&lt;/strong&gt;(Dependency-Management)来唯一确定依赖树中包的版本。&lt;/p&gt;</description></item><item><title>ThreadLocal原理浅析</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/threadlocal%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/</link><pubDate>Mon, 18 Apr 2022 10:01:31 +0000</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/threadlocal%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/</guid><description>&lt;p&gt;ThreadLocal是一种实现线程安全的机制，它提供了访问线程局部变量（thread-local variables）的方法，线程局部变量与普通变量的不同之处在于，线程局部变量在每一个线程中的值都是独立的，这保证了在多线程环境下不会出现线程串用的问题。&lt;/p&gt;</description></item><item><title>Java单例模式中的一个多线程问题</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E4%B8%AD%E7%9A%84%E4%B8%80%E4%B8%AA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98/</link><pubDate>Fri, 15 Apr 2022 14:43:37 +0000</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E4%B8%AD%E7%9A%84%E4%B8%80%E4%B8%AA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%97%AE%E9%A2%98/</guid><description>&lt;p&gt;合理使用单例模式可以节约内存资源，但错误的使用可能会导致严重的生产问题，如：多线程下，一个线程可能会覆盖上一个线程的单例属性，导致两次不同的请求得到同样的响应。&lt;/p&gt;
&lt;p&gt;下面将结合一个例子来分析这种情况。&lt;/p&gt;</description></item><item><title>JVM性能调优工具汇总</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/jvm%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/</link><pubDate>Fri, 31 Dec 2021 10:25:57 +0000</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/jvm%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/</guid><description>&lt;h2 id="一命令行工具"&gt;一、命令行工具&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;序号&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;jps&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;虚拟机进程状况工具，主要用于查找vmid，是后续命令的基础&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;code&gt;jstat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;虚拟机统计信息监视工具，查找虚拟机进程中类加载、内存、GC等信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;jinfo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Java配置信息工具，实时查看和调整虚拟机各项参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;code&gt;jmap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Java内存映像工具，生成堆转储快照（headump、dump），与&lt;code&gt;jhat&lt;/code&gt;配合使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;code&gt;jhat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;虚拟机堆转储快照分析工具，分析&lt;code&gt;jmap&lt;/code&gt;生成的堆转储快照文件，与&lt;code&gt;jmap&lt;/code&gt;配合使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;code&gt;jstack&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Java堆栈跟踪工具，生成虚拟机当前时刻的线程快照（threaddump、javacore）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;code&gt;jcmd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Java命令行工具集，整合了上述众多命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;code&gt;clhsdb&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;HotSpot命令行调试器，也整合了上述众多命令&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;JDK9之后的变化：&lt;code&gt;jhat&lt;/code&gt;与&lt;code&gt;clhsdb&lt;/code&gt;被移除，&lt;code&gt;clhsdb&lt;/code&gt;的功能被纳入了&lt;code&gt;jhsdb&lt;/code&gt;&lt;/p&gt;</description></item><item><title>Java8函数式编程入门</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/</link><pubDate>Sat, 21 Aug 2021 09:38:30 +0000</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/</guid><description>&lt;h2 id="一lambda表达式"&gt;一、Lambda表达式&lt;/h2&gt;
&lt;p&gt;什么是Lambda表达式?&lt;/p&gt;
&lt;p&gt;Lambda表达式是一个函数，有入参和出参，它表示一个行为。&lt;/p&gt;
&lt;p&gt;Lambda表达式是一个对象，Java中函数是二等公民，只能依附于类存在，Lambda表达式的目标类型被称之为函数接口。&lt;/p&gt;
&lt;h3 id="一lambda表达式与匿名内部类对象"&gt;（一）Lambda表达式与匿名内部类对象&lt;/h3&gt;
&lt;p&gt;Lambda表达式和匿名内部类对象很像，在正式介绍Lambda表达式之前，先看看一个匿名内部类对象的例子。&lt;/p&gt;
&lt;p&gt;一般情况下，接口不可以直接实例化，但可以在new接口的过程中重写接口中的方法来创建一个匿名内部类对象。如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Runnable anonymousClassesRunnable &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Runnable() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;run&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;我是一个匿名类内部类对象&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有没有更简单的方式呢？请看下述代码：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Runnable lambdaRunnable = () -&amp;gt; System.out.println(&amp;#34;我是一个lambda表达式&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述代码中&lt;code&gt;=&lt;/code&gt;右侧的&lt;code&gt;() -&amp;gt; System.out.println(&amp;quot;我是一个lambda表达式&amp;quot;)&lt;/code&gt;是一个&lt;code&gt;Lambda表达式&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这个Lambda表达式由三部分组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;()&lt;/code&gt; : 请求参数，这里为空（对应了上述匿名内部类中run方法的请求参数）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System.out.println(&amp;quot;我是一个lambda表达式&amp;quot;)&lt;/code&gt;: 方法体（对应了上述匿名内部类中run方法的方法体）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt; : Lambda表达式标识符，连接左侧的请求参数和右侧的方法体&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到，Lambda表达式与匿名内部类对象完全等价，它们都在&lt;code&gt;=&lt;/code&gt;右侧，都可以被赋值给&lt;code&gt;=&lt;/code&gt;左侧的接口变量，换言之，&lt;strong&gt;Lambda表达式本质上是一个接口的实例化对象&lt;/strong&gt;（在Java中，万物皆对象，lambda表达式也不例外）。那么，任意接口都可以是Lambda表达式的目标类型吗？&lt;/p&gt;</description></item><item><title>Java正则入门</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java%E6%AD%A3%E5%88%99%E5%85%A5%E9%97%A8/</link><pubDate>Wed, 07 Apr 2021 18:01:00 +0000</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java%E6%AD%A3%E5%88%99%E5%85%A5%E9%97%A8/</guid><description>&lt;p&gt;以String类中的匹配与替换为入口, 简单介绍Java正则匹配与正则替换&lt;/p&gt;
&lt;h2 id="一前言"&gt;一、前言&lt;/h2&gt;
&lt;p&gt;正则表达式一般用于字符串的模式&lt;strong&gt;匹配&lt;/strong&gt;与&lt;strong&gt;替换&lt;/strong&gt;，Java通过Pattern类与Matcher类原生支持正则表达式。在此基础上，String类封装了正则的细节，提供了一种更便捷的正则操作的方式。&lt;/p&gt;
&lt;p&gt;本文将从String类说起，通过它的matches与replace系列方法，介绍&lt;a href="#%E4%BA%8Cstring%E5%8C%B9%E9%85%8D%E4%B8%8E%E6%9B%BF%E6%8D%A2"&gt;String的匹配与替换&lt;/a&gt;。随后，将介绍Java正则中的&lt;a href="#%E4%B8%89pattern%E4%B8%8Ematcher"&gt;Pattern与Matcher&lt;/a&gt;两大核心类的基本使用方法。最后，将从&lt;a href="#%E5%9B%9Bstring%E6%AD%A3%E5%88%99%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90"&gt;String类源码&lt;/a&gt;层面，简单分析String类的正则匹配和正则替换是如何通过Pattern类和Matcher类实现的。&lt;/p&gt;
&lt;p&gt;有关正则表达式的前置知识介绍，请参照本文&lt;a href="#%E9%99%84%E5%BD%95"&gt;附录&lt;/a&gt;中的&lt;a href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%80%9A%E7%94%A8%E7%9F%A5%E8%AF%86"&gt;正则表达式通用知识&lt;/a&gt;。&lt;/p&gt;</description></item><item><title>OpenJDK8u构建指南</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/openjdk8u%E6%9E%84%E5%BB%BA%E6%8C%87%E5%8D%97/</link><pubDate>Mon, 20 Jan 2020 17:42:00 +0000</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/openjdk8u%E6%9E%84%E5%BB%BA%E6%8C%87%E5%8D%97/</guid><description>&lt;p&gt;官方OpenJdk8u构建指南个人翻译版本。官方地址为&lt;a href="http://hg.openjdk.java.net/jdk8u/jdk8u/file/120809c21ad7/README-builds.html"&gt;README-builds.html&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="介绍"&gt;介绍&lt;/h1&gt;
&lt;p&gt;这个README文件包含了OpenJDK的构建说明。构建OpenJDK的源码需要一定的专业技术知识。&lt;/p&gt;</description></item><item><title>Java文件流与策略模式的综合运用：用两种方式完成文件读写操作</title><link>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java%E6%96%87%E4%BB%B6%E6%B5%81%E4%B8%8E%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%BB%BC%E5%90%88%E8%BF%90%E7%94%A8%E7%94%A8%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%8C%E6%88%90%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C/</link><pubDate>Mon, 20 May 2019 16:44:45 +0000</pubDate><guid>https://luanrz.github.io/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java%E6%96%87%E4%BB%B6%E6%B5%81%E4%B8%8E%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%BB%BC%E5%90%88%E8%BF%90%E7%94%A8%E7%94%A8%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%8C%E6%88%90%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%93%8D%E4%BD%9C/</guid><description>&lt;h2 id="前言"&gt;前言&lt;/h2&gt;
&lt;p&gt;文件分为文本文件和非文本文件（二进制文件，如音频、图片文件等），此处讨论的主要是文本文件。&lt;/p&gt;
&lt;p&gt;文件的读写操作基于Java的I/O流，Java流分为字节流与字符流，它们都可以实现文件的读写操作。一般而言，字符流专注于处理文本文件，而字节流则更为通用，所有类型的文件均可操作。基于此，文本文件的读写操作有两种不同的策略：字节流文件读写与字符流文件读写。&lt;/p&gt;</description></item></channel></rss>